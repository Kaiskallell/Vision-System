---
# Adapted from these sources
# Source 1: https://github.com/googleapis/google-cloud-cpp/blob/master/.clang-tidy
# Source 2: https://github.com/Kitware/CMake/blob/master/.clang-tidy
#
# Here is an explanation for why some of the checks are disabled according to the
# Google C++ Guidelines:
#
#  -modernize-use-trailing-return-type: clang-tidy recommends using
#      `auto Foo() -> std::string { return ...; }`, we think the code is less
#      readable in this form.
#
#  -modernize-return-braced-init-list: We think removing typenames and using
#      only braced-init can hurt readability.
#
#  -modernize-use-nodiscard: this can hurt readability.
#
#  -performance-move-const-arg: This warning requires the developer to
#      know/care more about the implementation details of types/functions than
#      should be necessary. For example, `A a; F(std::move(a));` will trigger a
#      warning IFF `A` is a trivial type (and therefore the move is
#      meaningless). It would also warn if `F` accepts by `const&`, which is
#      another detail that the caller need not care about.
#
Checks: >
  -*,
  bugprone-*,
  google-*,
  misc-*,
  modernize-*,
  performance-*,
  portability-*,
  readability-*,
  -google-runtime-references,
  -misc-non-private-member-variables-in-classes,
  -modernize-return-braced-init-list,
  -performance-move-const-arg,
  -modernize-use-trailing-return-type,
  -modernize-use-nodiscard

# Enable clang-tidy checks only in src & tests for all headers too
# These seem to work for headers as long as Clang-Tidy is integrated with CMake
HeaderFilterRegex: '.*(src|tests).*\.(h|hxx|hpp|cxx|cpp)$'

# Turn all the warnings from the checks above into errors.
WarningsAsErrors: "*"

CheckOptions:
  - { key: modernize-use-default-member-init.UseAssignment,      value: '1'}
  - { key: readability-identifier-naming.NamespaceCase,          value: lower_case }
  - { key: readability-identifier-naming.ClassCase,              value: CamelCase  }
  - { key: readability-identifier-naming.StructCase,             value: CamelCase  }
  - { key: readability-identifier-naming.TemplateParameterCase,  value: CamelCase  }
  - { key: readability-identifier-naming.FunctionCase,           value: camelBack  }
  - { key: readability-identifier-naming.VariableCase,           value: camelBack  }
  - { key: readability-identifier-naming.PublicMemberCase,        value: camelBack  }
  - { key: readability-identifier-naming.PrivateMemberCase,       value: camelBack  }
  - { key: readability-identifier-naming.ProtectedMemberCase,     value: camelBack  }
  - { key: readability-identifier-naming.PublicMemberPrefix,      value: m_         }
  - { key: readability-identifier-naming.PrivateMemberPrefix,     value: m_         }
  - { key: readability-identifier-naming.ProtectedMemberPrefix,   value: m_         }
  - { key: readability-identifier-naming.MacroDefinitionCase,     value: UPPER_CASE }
  - { key: readability-identifier-naming.EnumConstantCase,         value: CamelCase }
  - { key: readability-identifier-naming.ConstexprVariableCase,    value: CamelCase }
  - { key: readability-identifier-naming.ConstexprVariablePrefix,  value: k         }
  - { key: readability-identifier-naming.GlobalConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.GlobalConstantPrefix,     value: k         }
  - { key: readability-identifier-naming.MemberConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.MemberConstantPrefix,     value: m_k       }
  - { key: readability-identifier-naming.StaticConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.StaticConstantPrefix,     value: k       }
  - { key: readability-implicit-bool-conversion.AllowIntegerConditions,  value: 1   }
  - { key: readability-implicit-bool-conversion.AllowPointerConditions,  value: 1   }
